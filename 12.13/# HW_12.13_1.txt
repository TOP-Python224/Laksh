Шаблоны проектирования: Строитель

  ==========  1  ==========

Реализуйте шаблон Строитель для формирования текста кода класса с конструктором или без.

Строитель должен предоставить возможность:
  — задавать имя класса
  — добавлять поля экземпляра в конструкторе (без передачи аргументов в конструктор)
  — устанавливать значения по умолчанию для полей экземпляра

При отсутствии добавленных полей, строитель должен сгенерировать заглушку под заголовком класса.

Не забудьте учесть пробелы и отступы.

Строитель должен вернуть один str объект с нужным кодом.


Пример:

    class ClassBuilder:
        ...

    cb = ClassBuilder('Person').add_field('name', '""').add_field('age', '0')
    print(cb)

Ожидаемое возвращаемое значение:

    class Person:
        def __init__(self):
            self.name = ""
            self.age = 0


Пример с пустым классом:                  

    cb = ClassBuilder('Foo')                     
    print(cb)                                   

Ожидаемое возвращаемое значение:

    class Foo:
        pass



  ==========  2  ==========

Доработайте написанные на лекции в модуле builder1 классы HTML элемента и строителя таким образом, чтобы для каждого элемента (тега) была возможность добавить произвольное (ноль и более) количество атрибутов с именем и значением.

Используйте в качестве параметров соответствующих методов произвольный словарь аргументов **kwargs



  ==========  3  ==========

Составьте класс, описывающий HTML документ портфолио человека.
Напишите класс строителя для генерации такого HTML документа.

Воспользуйтесь уже реализованными в предыдущей задаче классами HTML элемента и строителя элементов.

Класс должен предоставить возможность добавить:
  — обязательный раздел с фио, возрастом, и сферой занятости
  — необязательный раздел с образованием (учебное заведение, специальность, год окончания)
  — необязательный раздел с успешными работами/проектами
  — обязательный раздел с произвольным набором полей контактов (email обязателен)

В случае появления пункта из необязательного раздела, у этого раздела должен быть подзаголовок. Если для раздела не заявлено ни одного пункта, то подзаголовок опускается.

Добавьте к строителю метод build(), который вернёт сформированный объект.

Реализуйте минимальную вёрстку.


Пример использования:

    class CVBuilder:
        ...

    cv1 = CVBuilder('Иванов Иван Иванович', 26, 'художник-фрилансер', 'ivv@abc.de')\
              .add_education('Архитектурная Академия', 'Компьютерный дизайн', 2019)
              .add_project('Разработка логотипа для компании по производству снеков', 
                           path_to_image)\
              .add_project('UI разработка для интернет-магазина для восковых дел мастеров'
                           path_to_image, path_to_image)\
              .add_contact(devianart='ivovuvan_in_art')\
              .add_contact(telegram='@ivovuvan')\
          .build()
    print(cv1)

Ожидаемое возвращаемое значение:

    <html>
      <head>
        <title>Иван: портфолио</title>
      </head>
      <body>
        <div ...>
          <h2>Обо мне</h2>
          <p>...</p>
          ...
        </div>
        ...
      </body>
    </html>

Вместо многоточий должны быть HTML код и значения.
Структура HTML кода может отличаться.



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции, классы и методы (кроме "магических") документируются.
Параметры функций и методов (кроме self) аннотируются.

Все файлы выполняются с помощью интерпретатора.
Текстовый вывод в стандартный поток stdout копируется.
Копия вывода в виде комментария помещается в конец файла с кодом задачи.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.