Шаблоны проектирования: Фабрика

  ==========  1  ==========

Разработайте класс FilmCard, который описывает карточку с информацией о фильме в каталоге онлайн-кинотеатра.

Используйте композицию для создания возможной связи с другими фильмами.

Быть у вас около десяти полей должно.

Реализуйте шаблон Фабрики для создания экземпляров FilmCard.

Продемонстрируйте работу вашего кода.



  ==========  2  ==========

Абстрактная фабрика может быть использована для выделения сущностей в разные семейства. 

Предположим, у нас есть объектная модель различных ресторанных блюд, которые наследуются от абстрактного класса Dish. Этот класс, например, может объявлять необходимость наличия у производных классов таких атрибутов как: название, описание, список ингредиентов, стоимость и метод потребления. Классы наследники, соответственно, реализуют эти требования.

Dish(ABC)
  └───────Dish1
  └───────Dish2
  └───────Dish3
  └-------...

Но помимо этих объединяющих атрибутов, блюда могут быть сгруппированы по кухням, например, блюда русской кухни и блюда азиатской кухни.

Таким образом, мы можем составить цепочку фабрик, наследуемых от абстрактной фабрики. В этом примере, каждая фабрика может формировать набор блюд (закуска, первое и второе, например) для конкретной кухни.

Factory(ABC)
    └────────Factory1
    └────────Factory2

Реализуйте шаблон Абстрактной фабрики, который позволял бы создавать объекты либо одной, либо другой кухни — в зависимости от переданной в stdin строки.

Фабрики исполнители пусть отвечают только за подачу блюд — т.е. необходимо создать экземпляр блюда и объявить в stdout, что такое-то блюдо подано.

Продемонстрируйте работу вашего кода.



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции, классы и методы (кроме "магических") документируются.
Параметры функций и методов (кроме self) аннотируются.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.