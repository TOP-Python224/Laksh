Шаблон проектирования: Компоновщик

  ==========  1  ==========

У вас есть класс File. Допишите реализацию класса Folder таким образом, чтобы функция ls() могла принимать на вход экземпляры обоих классов.


from dataclasses import dataclass

import os

if os.name == 'nt':
    PATH_SEP = '\\'
else:
    PATH_SEP = '/'


@dataclass
class File:
    """Файл в файловой системе."""
    name: str
    dir: str
    
    @property
    def extension(self) -> str:
        return self.name.rsplit('.', 1)[-1][1:]
    
    def ls(self) -> str:
        return self.dir_path + PATH_SEP + self.name


class Folder(list):
    """Каталог в файловой системе. Может содержать вложенные каталоги и файлы."""


def ls(*objects: File | Folder) -> str:
    for obj in objects:
        print(obj.ls())



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции, классы и методы (кроме "магических") документируются.
Параметры функций и методов (кроме self) аннотируются.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.