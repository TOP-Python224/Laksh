Шаблон проектирования: Цепочка ответственности

  ==========  1  ==========

У вас есть веб-сервер, принимающий и обрабатывающий запросы. Каждый запрос после обработки получает ответ с определённым кодом. 
Этот ответ должен пройти цепочку обработчиков, каждый из которых реагирует только на один определённый код. 

Напишите класс, имитирующий получение веб-сервером запросов (например, из stdin) и генерацию ответов с кодами (например: 200, 403, 404, 500). 
Ответ может быть кортежем, словарём, отдельным классом или любой другой структурой данных — главное, чтобы одним из элементов этой структуры был код ответа.

Напишите классы-обработчики в количестве, соответствующем числу генерируемых вариантов кодов ответа.

Каждый обработчик должен проверять код ответа. 
Если код в ответе не соответствует коду конкретного обработчика, то обработчик ничего не делает с ответом, а передаёт объект ответа дальше (работа цепочки продолжается). 
Если код в ответе эквивалентен коду конкретного обработчика, то обработчик должен обозначить свою реакцию (например, сообщением в stdout, содержащим имя класса обработчика) и НЕ должен передавать объект дальше (работа цепочки останавливается).

Самостоятельно выберите способ реализации: цепочка методов или брокер событий.



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции, классы и методы (кроме "магических") документируются.
Параметры функций и методов (кроме self) аннотируются.

Все файлы выполняются с помощью интерпретатора.
Текстовый вывод в стандартный поток stdout копируется.
Копия вывода в виде комментария помещается в конец файла с кодом задачи.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.