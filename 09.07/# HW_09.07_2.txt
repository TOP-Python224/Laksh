Декораторы

Дополнительный материал по декораторам:
    https://proglib.io/p/vse-chto-nuzhno-znat-o-dekoratorah-python-2020-05-09?ysclid=l4vilfmfb2578737646
        разделы "на сейчас" (остальные "на потом"):
            - 1. Предварительные соображения: функции
            - 2. Простые декораторы

  ==========  1  ==========

Напишите декоратор для оценки времени выполнения функции.

Используйте функции perf_counter и perf_counter_ns из модуля стандартной библиотеки time.
    
    https://docs.python.org/3/library/time.html#time.perf_counter



  ==========  2  ==========

Напишите декоратор, который ведёт журнал вызовов функции в стандартном потоке вывода, используя атрибуты объекта функции __name__ и аргументы, переданные функции.

Сформируйте строку удобную для чтения, используйте символы пробел, табуляция, конец строки.

Скопируйте функцию checkhand() из файла poker_func.py и примените к ней написанный декоратор

В коде верхнего уровня напишите цикл, который должен генерировать новый набор карт и передавать его функции checkhand() пока функция не вернёт значение 'сет'.

Запустите скрипт и скопируйте вывод в отдельный текстовый файл, который отправьте в удалённый репозиторий вместе с файлами с кодом.



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции обязательно документируются.
Параметры функций обязательно аннотируются.

Все файлы выполняются с помощью интерпретатора.
Текстовый вывод в стандартный поток stdout копируется.
Копия вывода в виде комментария помещается в конец файла с кодом задачи.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.