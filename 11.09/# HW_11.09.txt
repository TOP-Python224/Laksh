Атрибуты и свойства. Перегрузка операторов

  ==========  1  ==========

Реализовать класс для удобной работы с матрицами.

Подробнее о матрицах можно прочитать здесь: https://thecode.media/matrix-101/
Ещё подробнее — в методичке в каталоге с заданием.

Напишите метод __init__ для инициализации матрицы элементами. Чтобы не усложнять, давайте пока считать, что элементами матрицы могут быть только целые числа.

Придумайте несколько способов хранения элементов матрицы в атрибутах.
Думайте, в каком случае имеет смысл использовать атрибуты класса. Думайте обо всех видах атрибутов: обычные, скрытые, защищённые. Думайте, можно и нужно ли использовать свойства (геттеры и сеттеры). Думайте, имеет ли смысл использовать те или иные атрибуты в той или иной структуре данных. Думайте, помогут ли той или иной реализации вспомогательные методы.
Думайте.

Класс должен поддерживать операции:
  - поэлементного сложения
  - поэлементного вычитания 
  - поэлементного умножения на число
Реализуйте для этого методы __add__, __sub__ и __mul__. Вам также могут понадобиться вспомогательные методы.

Реализуйте метод __str__ для форматированного вывода элементов матрицы. Столбцы матрицы должны быть колонками с выравниванием вправо, расстояние между колонками — один пробел.

Важно:
Реализуйте КАЖДЫЙ из придуманных способов хранения, отмечая как меняется код каждого метода, включая конструктор, в зависимости от используемой структуры хранения данных. 
Таким образом у вас должно получиться несколько разных классов — дайте им имена Matrix1, Matrix2, ... и так далее.

Поместите их в один файл, сделайте между ними отступ, не забудьте описать в строке документации каждый класс и обязательно проверьте работоспособность каждого класса.

Пример:

    class Matrix1:
        ...

    m1 = Matrix1(...)
    m2 = Matrix1(...)

    m3 = m1 + m2
    m4 = 2 * m1
    
    print(m3)
    
    # stdout:
    #   2   3  10
    #  21 -15   7
    #   1   8  -4
    #  -1  47   5



  =========================

Код каждой решённой задачи помещается в текущий каталог репозитория в виде отдельного файла с именем, соответствующем номеру задачи.

Функции, классы и методы (кроме "магических") документируются.
Параметры функций и методов (кроме self) аннотируются.

В сервис Журнал отправляется сообщение о выполнении задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Проверяйте обновления в своём репозитории каждый день.